/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/argoproj-labs/argocd-interlace/pkg/apis/interlaceprofile/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InterlaceProfileLister helps list InterlaceProfiles.
// All objects returned here must be treated as read-only.
type InterlaceProfileLister interface {
	// List lists all InterlaceProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.InterlaceProfile, err error)
	// InterlaceProfiles returns an object that can list and get InterlaceProfiles.
	InterlaceProfiles(namespace string) InterlaceProfileNamespaceLister
	InterlaceProfileListerExpansion
}

// interlaceProfileLister implements the InterlaceProfileLister interface.
type interlaceProfileLister struct {
	indexer cache.Indexer
}

// NewInterlaceProfileLister returns a new InterlaceProfileLister.
func NewInterlaceProfileLister(indexer cache.Indexer) InterlaceProfileLister {
	return &interlaceProfileLister{indexer: indexer}
}

// List lists all InterlaceProfiles in the indexer.
func (s *interlaceProfileLister) List(selector labels.Selector) (ret []*v1beta1.InterlaceProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InterlaceProfile))
	})
	return ret, err
}

// InterlaceProfiles returns an object that can list and get InterlaceProfiles.
func (s *interlaceProfileLister) InterlaceProfiles(namespace string) InterlaceProfileNamespaceLister {
	return interlaceProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InterlaceProfileNamespaceLister helps list and get InterlaceProfiles.
// All objects returned here must be treated as read-only.
type InterlaceProfileNamespaceLister interface {
	// List lists all InterlaceProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.InterlaceProfile, err error)
	// Get retrieves the InterlaceProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.InterlaceProfile, error)
	InterlaceProfileNamespaceListerExpansion
}

// interlaceProfileNamespaceLister implements the InterlaceProfileNamespaceLister
// interface.
type interlaceProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InterlaceProfiles in the indexer for a given namespace.
func (s interlaceProfileNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.InterlaceProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InterlaceProfile))
	})
	return ret, err
}

// Get retrieves the InterlaceProfile from the indexer for a given namespace and name.
func (s interlaceProfileNamespaceLister) Get(name string) (*v1beta1.InterlaceProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("interlaceprofile"), name)
	}
	return obj.(*v1beta1.InterlaceProfile), nil
}
